@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

<dialog id="@Id">
    <div class="dialog-content">
        @ChildContent
        <br/>
        <button @onclick="HideModalAsync" class="btn btn-filled btn-auto mb">
           Registrar
        </button>

    </div>
</dialog>

@code {
    
    [EditorRequired]
    [Parameter]
    public string Id { get; set; } = string.Empty;
    
    [EditorRequired]
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;
    
    [Parameter]
    public EventCallback<MouseEventArgs> OnModalCloseCallback { get; set; }

    public async Task ShowModalAsync()
    {
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("showModal", Id);
    }
    
    private async Task HideModalAsync()
    {
        await JsRuntime.InvokeVoidAsync("hideModal", Id);
        //Esta função notifica para atualizar o estado dos outros componentes
        StateHasChanged();
        Navigation.NavigateTo("#history");
        await OnModalCloseCallback.InvokeAsync();
    }
}